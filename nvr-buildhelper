#!/usr/bin/env python

import sys
import re
import subprocess
from nvr.nvr import Nvr

class Buildhelper:
    """
    Build helper class.
    Creates a connection to the neovim instance and handles the creation of the
    signs as well as the population of quickfix list and sign list.
    """
    def __init__(self):
        """
        Create session and signs.
        """
        self.nvr = Nvr('/tmp/nvimsocket', False)
        self.nvr.attach()

        self.create_signs()

    def populate_quickfix(self, args):
        """
        Load in a list of `errorformat` strings.

        :param args: List of strings in the format 'file:line:col: (error|warning): message'
        """
        self.nvr.server.command("call setqflist([])")
        for arg in args:
            self.nvr.server.command("caddexpr '{}'".format(
                arg.rstrip().replace("'", "''").replace("|", "\\")))

    def create_signs(self):
        """
        Create the signs for 'error' and 'warning'.
        """
        self.nvr.server.command("sign define warning text=>> texthl=Blue")
        self.nvr.server.command("sign define error text=>> texthl=Red")

    def populate_signs(self, args):
        """
        Populate the signs.

        :param args: List of (file, line, errortype) tuples, where errortype is
                     one one of the sign types defined in create_signs.
        """
        self.nvr.server.command("sign unplace 2334")
        id=2334
        for filename, line, errortype in args:
            self.nvr.server.command("sign place 2334 line={} name={} file={}".format(
                line, errortype, filename))

def load_output(iterable):
    """
    Load output of iterable line by line, check for errorformat, parse, and
    send to neovim.

    :param iterable: An iterable of string lines.
    """
    b = Buildhelper()
    regex = re.compile(r"^([^:]+):(\d+):\d+: (warning|error):.*")
    qflist = []
    signlist = []
    for line in iterable:
        x = regex.fullmatch(line)
        if x:
            qflist.append(line)
            signlist.append(tuple(map(x.group, range(1,4))))

    b.populate_quickfix(qflist)
    b.populate_signs(signlist)


if __name__ == '__main__':
    cmd = sys.argv[1:]
    proc = subprocess.run(cmd, stdout=subprocess.PIPE, universal_newlines=True)
    load_output(proc.stdout.split('\n'))
